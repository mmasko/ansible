#!/bin/ansible
---
- hosts: localhost
  vars:
    skip_backup: false # Set to true to skip archiving and uploading of player world files. 
    force_stop: false # Forces shutdown of server even if there are clients connected
    skip_warning: false # Skips 20 second warning. 
    force_terminate: false # Forces a URI post event to API to terminate server.

  gather_facts: false

  tasks:

    - name: Register port 22 connections
      shell: netstat -anp | grep :22 | grep ESTABLISHED | wc -l
      register: active_port_22
      become: true

    - name: Register port 25565 connections
      shell: netstat -anp | grep :25565 | grep ESTABLISHED | wc -l
      register: active_port_25565
      become: true

    - name: set service state to started so no actions are taken
      set_fact:
        service_state: "started"
      when: active_port_25565.stdout > "0" and active_port_22.stdout > "0" or force_stop != true

    - name: set fact stopped if no active connections or force stop is true
      set_fact:
        service_state: "stopped"
      when: active_port_25565.stdout == "0" and active_port_22.stdout == "0" or force_stop == true

    - name: Send warning to players that server is stopping
      command: "{{ item }}"
      loop:
        - tmux send-keys -t minecraft 'say SERVER SHUTTING DOWN IN 10 SECONDS' ENTER
        - sleep 5
        - tmux send-keys -t minecraft 'save-all' ENTER
        - sleep 5
        - tmux send-keys -t minecraft 'say SERVER SHUTTING DOWN' ENTER
        - sleep 1
        - tmux send-keys -t minecraft 'stop' ENTER
        - sleep 5
      when: service_state == "stopped" and skip_warning == false
      become: true
      become_user: minecraft

    - name: Zip game world
      archive:
        path: /opt/minecraft/world
        dest: /opt/minecraft/world.zip
      when:
        - service_state == "stopped"
        - skip_backup == false
      become: true
      become_user: minecraft

    - name: Backup world to S3
      aws_s3:
        bucket: gamesmasko
        object: minecraft/worlds/world.zip
        src: /opt/minecraft/world.zip
        mode: put
      when:
        - service_state == "stopped"
        - skip_backup == false
      become: true
      become_user: minecraft

    - name: Send POST to API to terminate instance
      uri:
        url: "{{ api_path }}"
        method: POST
        return_content: yes
        body_format: json
        body: {"type": "terminate", "instID": "{{ instID.content }}"}
      register: uri_post
      when: active_port_25565.stdout == "0" and active_port_22.stdout == "0" or force_terminate == true and instID is defined

    - name: display Instance ID
      debug:
        var: instID.content